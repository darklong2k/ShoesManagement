@{
    ViewData["Title"] = "Trang giỏ hàng";
}﻿

<div class="container mt-5">
    <!-- Header Giỏ Hàng -->
    <div class="row mb-4">
        <div class="col text-center">
            <h1>Giỏ Hàng</h1>
        </div>
    </div>



    <div id="cart-content"></div>


    <!-- Kiểm tra giỏ hàng có sản phẩm hay không -->
    <div id="cart-container">
        <!-- Giỏ hàng trống -->
        <div id="empty-cart" class="alert alert-warning text-center d-none">
            <p>Giỏ hàng của bạn đang trống. Hãy thêm sản phẩm vào giỏ hàng.</p>
            <a href="/Home/TrangSanPham" class="btn btn-primary">Quay lại mua tiếp</a>
        </div>


        <!-- Giỏ hàng có sản phẩm -->
        <div id="non-empty-cart" class="d-none">
            <div class="table-responsive">
                <table class="table table-bordered text-center">
                    <thead>
                        <tr>
                            <th>Hình ảnh</th>
                            <th>Tên sản phẩm</th>
                            <th>Màu sắc</th>
                            <th>Size</th>
                            <th>Giá</th>
                            <th>Số lượng</th>
                            <th>Thành tiền</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="cart-items" class="align-middle">
                        <!-- Các sản phẩm trong giỏ hàng sẽ được hiển thị ở đây -->
                    </tbody>
                </table>
            </div>

            <!-- Phân trang -->
            <nav class="mt-4">
                <ul class="pagination justify-content-center" id="pagination">
                    <!-- Các trang sẽ được hiển thị ở đây -->
                </ul>
            </nav>

            <!-- Tổng tiền và các nút hành động -->
            <div class="row mt-3">
                <div class="col-12 d-flex justify-content-end">
                    <div>
                        <strong>Tổng tiền:</strong> <span class="text-danger" id="total-cart-price">0đ</span>
                    </div>
                </div>

                <div class="col-12 d-flex justify-content-end mt-2">
                    <button class="btn btn-outline-danger me-2" onclick="clearCart()">Xóa hết giỏ hàng <i class="bi bi-arrow-clockwise"></i></button>
                    <a class="btn btn-outline-primary me-2" href="/home/trangsanpham"><i class="bi bi-arrow-left"></i> Mua tiếp</a>
                    <a href="/home/trangthongtingiaohang"><button class="btn btn-success" onclick="placeOrder()">Đặt hàng <i class="bi bi-arrow-right"></i></button></a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        var isLoggedIn = @Html.Raw(Json.Serialize(ViewBag.IsLoggedIn));

// Chặn các hành động nếu chưa đăng nhập
        if (!isLoggedIn) {
            const cartContent = document.getElementById('cart-content');
            cartContent.innerHTML = `
            <div class="text-center mt-4">
                <p class="text-danger fw-bold">Bạn cần đăng nhập để xem nội dung giỏ hàng.</p>
                <a class="btn btn-outline-primary mt-3" href="#" id="UserICON" data-bs-toggle="modal" data-bs-target="#loginModal">
                    Đăng nhập ngay
                </a>
            </div>
        `;
        }
        else {

        
        let cartItems = [];
        const itemsPerPage = 5;
        let currentPage = 1;

        const emptyCart = document.getElementById('empty-cart');
        const nonEmptyCart = document.getElementById('non-empty-cart');
        const cartContainer = document.getElementById('cart-items');
        const totalCartPrice = document.getElementById('total-cart-price');
        const pagination = document.getElementById('pagination');

        // Hàm định dạng giá tiền
        function formatCurrency(value) {
            return value.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        }

        // Hàm hiển thị giỏ hàng
        function displayCart() {
            if (cartItems.length === 0) {
                emptyCart.classList.remove('d-none');
                nonEmptyCart.classList.add('d-none');
                return;
            }

            emptyCart.classList.add('d-none');
            nonEmptyCart.classList.remove('d-none');

            cartContainer.innerHTML = '';
            let start = (currentPage - 1) * itemsPerPage;
            let end = start + itemsPerPage;
            let paginatedItems = cartItems.slice(start, end);
            let totalPrice = 0;

            paginatedItems.forEach(item => {
                totalPrice += item.quantity * item.productPrice;
                cartContainer.innerHTML += `
                <tr>
                    <td><a href="/Home/TrangChiTietSP/${item.productId}"><img src="/images/${item.productImage}" alt="${item.productName}" class="img-fluid" style="width: 80px;"></a></td>
                    <td>${item.productName}</td>
                    <td>${item.productColor}</td>
                    <td>${item.productSize}</td>
                    <td>${formatCurrency(item.productPrice)}</td>
                    <td>
                        <input type="number" class="form-control text-center quantity-input"
       data-id="${item.productDetailId}"
       value="${item.quantity}"
       max="${item.productStock}"
       style="width: 60px;">
                    </td>
                    <td>${formatCurrency(item.quantity * item.productPrice)}</td>
                    <td><button class="btn btn-danger btn-sm remove-item" onclick="removeItem(${item.productDetailId})"><i class="bi bi-x-circle"></i> Xoá</button></td>
                </tr>
            `;
            });

            totalCartPrice.textContent = formatCurrency(totalPrice);
            generatePagination();
        }



        // Hàm tạo phân trang
        function generatePagination() {
            pagination.innerHTML = '';
            let totalPages = Math.ceil(cartItems.length / itemsPerPage);

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                </li>
            `;
            }
        }

        // Hàm thay đổi trang
        window.changePage = function (page) {
            currentPage = page;
            displayCart();
        };

        // Hàm cập nhật số lượng sản phẩm
        function updateQuantity(productDetailId, newQuantity) {
            $.ajax({
                url: `/api/CartAPI/updateQuantity/${productDetailId}`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify({ quantity: newQuantity }),
                success: function (response) {
                    if (response.success) {
                        // Cập nhật dữ liệu local và giao diện
                        const item = cartItems.find(i => i.productDetailId === productDetailId);
                        if (item) item.quantity = newQuantity;
                        displayCart();
                    } else {
                        alert(response.message || "Không thể cập nhật số lượng.");
                    }
                },
                error: function (xhr) {
                    console.error("Lỗi khi cập nhật số lượng:", xhr.responseText);
                    alert("Có lỗi xảy ra khi cập nhật số lượng.");
                }
            });
        }

        // Hàm xóa sản phẩm khỏi giỏ hàng
        window.removeItem = function (productDetailId) {
            console.log("Xóa sản phẩm có ID:", productDetailId);
            if (confirm("Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?")) {
                $.ajax({
                    url: `/api/CartAPI/removeItem/${productDetailId}`,
                    type: 'DELETE',
                    success: function (response) {
                        if (response.success) {
                            cartItems = cartItems.filter(item => item.productDetailId !== productDetailId);
                            displayCart();
                            alert("Sản phẩm đã được xóa.");
                        } else {
                            console.error("Server trả về lỗi:", response.message);
                            alert(response.message || "Không thể xóa sản phẩm.");
                        }
                    },
                    error: function (xhr) {
                        console.error("Lỗi từ server:", xhr.responseText);
                        alert("Có lỗi xảy ra khi xóa sản phẩm.");
                    }
                });
            }

        };

        // Hàm xóa toàn bộ giỏ hàng
        window.clearCart = function () {
            if (confirm("Bạn có chắc muốn xóa toàn bộ giỏ hàng?")) {
                $.ajax({
                    url: '/api/CartAPI/clearCart',
                    type: 'DELETE',
                    success: function (response) {
                        if (response.success) {
                            cartItems = [];
                            displayCart();
                            alert(response.message || "Giỏ hàng đã được xóa.");
                        } else {
                            alert(response.message || "Không thể xóa giỏ hàng.");
                        }
                    },
                    error: function (xhr) {
                        console.error("Lỗi khi xóa giỏ hàng:", xhr.responseText);
                        alert("Có lỗi xảy ra khi xóa giỏ hàng.");
                    }
                });
            }
        };

        // Lấy giỏ hàng khi trang web được tải
        function fetchCartItems() {
            $.ajax({
                url: '/api/CartAPI/getCartItems',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        cartItems = response.cartItems;
                        displayCart();
                    } else {
                        alert(response.message || "Không thể tải giỏ hàng.");
                    }
                },
                error: function (xhr) {
                    console.error("Lỗi khi lấy giỏ hàng:", xhr.responseText);
                    alert("Có lỗi xảy ra khi lấy giỏ hàng.");
                }
            });
        }

        // Event delegation cho các hành động trong bảng giỏ hàng
        document.getElementById('cart-items').addEventListener('click', function (e) {
            const target = e.target;
            if (target.classList.contains('quantity-increase') || target.classList.contains('quantity-decrease')) {
                const productDetailId = parseInt(target.dataset.id);
                const inputField = document.querySelector(`.quantity-input[data-id="${productDetailId}"]`);
                let currentQuantity = parseInt(inputField.value);

                if (target.classList.contains('quantity-increase')) {
                    currentQuantity++;
                } else if (target.classList.contains('quantity-decrease')) {
                    currentQuantity = Math.max(1, currentQuantity - 1);
                }

                inputField.value = currentQuantity; // Cập nhật hiển thị số lượng
                updateQuantity(productDetailId, currentQuantity); // Gọi API để cập nhật
            }
        });

        document.getElementById('cart-items').addEventListener('input', function (e) {
            if (e.target.classList.contains('quantity-input')) {
                const productDetailId = parseInt(e.target.dataset.id);
                const newQuantity = Math.max(1, parseInt(e.target.value) || 1);
                e.target.value = newQuantity; // Đảm bảo giá trị không nhỏ hơn 1
                updateQuantity(productDetailId, newQuantity); // Gọi API để cập nhật
            }
        });

        // Tải giỏ hàng khi trang được tải
            fetchCartItems();
        }
        });
    
</script>
