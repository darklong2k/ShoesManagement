<div class="container mt-5">
    <h2 class="mb-4">Nhập Hàng</h2>

    <!-- Khung Nhập Hàng -->
    <div class="card shadow-sm">
        <div class="card-body">
            <table id="importTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Tên Sản Phẩm</th>
                        <th>Size</th>
                        <th>Màu</th>
                        <th>Số Lượng</th>
                        <th>Hành Động</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Dòng cuối cùng chứa nút "Thêm Sản Phẩm" -->
                    <tr id="addRowButtonRow">
                        <td colspan="6" class="text-center">
                            <button class="btn btn-primary btn-sm" onclick="addNewRow()">
                                <i class="fas fa-plus"></i> Thêm Sản Phẩm
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Nút Điều Hướng -->
    <div class="d-flex justify-content-between mt-4">
        <a href="san-pham.html" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Quay Về
        </a>
        <button class="btn btn-success" onclick="saveImport()">
            <i class="fas fa-check"></i> Nhập Hàng
        </button>
    </div>
</div>
@section Scripts {
    <script>
        // Tạo API giả lập (thay bằng API thật trong môi trường production)
        const fakeApiResponse = {
            "Giày Da": { sizes: ["40", "41", "42", "43"], colors: ["Đen", "Nâu"] },
            "Giày Thể Thao": { sizes: ["38", "39", "40"], colors: ["Đen", "Trắng", "Xanh"] },
        };

        // Thêm dòng mới vào bảng trước nút "Thêm Sản Phẩm"
        function addNewRow() {
            const tableBody = document.querySelector("#importTable tbody");
            const addRowButtonRow = document.getElementById("addRowButtonRow");

            // Tạo dòng mới
            const newRow = document.createElement("tr");
            newRow.innerHTML = `
                <td>#</td>
                <td>
                    <select class="form-select product-select" onchange="updateProductDetails(this)">
                        <option value="">-- Chọn Sản Phẩm --</option>
                        ${Object.keys(fakeApiResponse).map(product => `<option value="${product}">${product}</option>`).join("")}
                    </select>
                </td>
                <td>
                    <select class="form-select size-select">
                        <option value="">-- Chọn Size --</option>
                    </select>
                </td>
                <td>
                    <select class="form-select color-select">
                        <option value="">-- Chọn Màu --</option>
                    </select>
                </td>
                <td>
                    <input type="number" class="form-control" placeholder="Số lượng" />
                </td>
                <td class="text-center">
                    <button class="btn btn-danger btn-sm" onclick="removeRow(this)">
                        <i class="fas fa-trash"></i> Xóa
                    </button>
                </td>
            `;

            // Chèn dòng mới trước nút "Thêm Sản Phẩm"
            tableBody.insertBefore(newRow, addRowButtonRow);
        }

        // Cập nhật Size và Màu dựa trên Sản Phẩm đã chọn
        function updateProductDetails(productSelect) {
            const selectedProduct = productSelect.value;
            const row = productSelect.closest("tr");
            const sizeSelect = row.querySelector(".size-select");
            const colorSelect = row.querySelector(".color-select");

            // Xóa các tùy chọn cũ
            sizeSelect.innerHTML = `<option value="">-- Chọn Size --</option>`;
            colorSelect.innerHTML = `<option value="">-- Chọn Màu --</option>`;

            if (selectedProduct && fakeApiResponse[selectedProduct]) {
                const { sizes, colors } = fakeApiResponse[selectedProduct];

                // Thêm các tùy chọn mới
                sizes.forEach(size => {
                    const option = document.createElement("option");
                    option.value = size;
                    option.textContent = size;
                    sizeSelect.appendChild(option);
                });

                colors.forEach(color => {
                    const option = document.createElement("option");
                    option.value = color;
                    option.textContent = color;
                    colorSelect.appendChild(option);
                });
            }
        }

        // Xóa dòng
        function removeRow(button) {
            const row = button.closest("tr");
            row.remove();
        }

        // Lưu thông tin nhập hàng
        function saveImport() {
            const rows = document.querySelectorAll("#importTable tbody tr:not(#addRowButtonRow)");
            const importData = [];

            rows.forEach(row => {
                const product = row.querySelector(".product-select").value;
                const size = row.querySelector(".size-select").value;
                const color = row.querySelector(".color-select").value;
                const quantity = row.querySelector("td:nth-child(5) input").value;

                if (product && size && color && quantity) {
                    importData.push({
                        product,
                        size,
                        color,
                        quantity: parseInt(quantity, 10),
                    });
                }
            });

            console.log("Dữ liệu nhập hàng:", importData);
            alert("Thông tin nhập hàng đã được lưu.");
        }
    </script>
}
