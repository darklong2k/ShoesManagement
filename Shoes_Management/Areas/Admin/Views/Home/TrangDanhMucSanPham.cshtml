
<div class="mt-3 m-lg-3">
    <h1>Quản lý danh mục sản phẩm</h1>

    <!-- Nút thêm danh mục -->
    <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#modalThemDanhMuc">
        Thêm danh mục sản phẩm
    </button>

    <!-- Popup cho thêm danh mục -->
    <div class="modal fade" id="modalThemDanhMuc" tabindex="-1" aria-labelledby="modalThemDanhMuc" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- Begin Form -->
                <form action="" method="POST">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Thêm danh mục sản phẩm</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Input Name -->
                        <div class="mb-3">
                            <label for="name" class="form-label">Tên danh mục</label>
                            <input type="text" class="form-control" id="name" name="name" placeholder="Nhập tên danh mục" required />
                        </div>
                        <!-- Dropdown Parent ID -->
                        <div class="mb-3">
                            <label for="parent_id" class="form-label">Danh mục cha</label>
                            <select class="form-control" id="parent_id" name="parent_id">
                                
                            </select>
                        </div>
                        <!-- Textarea Description -->
                        <div class="mb-3">
                            <label for="description" class="form-label">Mô tả</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Nhập mô tả danh mục"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <!-- Cancel Button -->
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                        <!-- Submit Button -->
                        <button type="button" class="btn btn-primary" onclick="addCategory()">Lưu thay đổi</button>
                    </div>
                </form>
                <!-- End Form -->
            </div>
        </div>
    </div>


    <div class="input-group rounded">
        <input type="search" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" />
        <span class="input-group-text border-0" id="search-addon">
            <i class="fas fa-search" style="cursor: pointer"></i>
        </span>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Category Id</th>
                <th>Name</th>
                <th>Parent ID</th>
                <th>Description</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Updated At</th>
                <th>Functions</th>
            </tr>
        </thead>
        <tbody>
            @* <tr>
                <td>1</td>
                <td>Male Jordan</td>
                <td>1</td>
                <td>Danh cho nam</td>
                <td>Con hang</td>
                <td>20/10/2024</td>
                <td>15/12/2024</td>
                <td>
                    <!-- Nút chỉnh sửa danh mục -->
                    <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#modalChinhSuaDanhMuc">
                    Chỉnh sửa
                    </button>
                    <button type="button" class="btn btn-danger">
                        Xóa
                    </button>
                </td>
            </tr> *@
        </tbody>
    </table>
</div>
<div id="pagination" class="d-flex justify-content-center mt-3">
    <!-- Nút phân trang sẽ được thêm động tại đây -->
</div>

<!-- Popup cho chỉnh sửa danh mục -->
<div class="modal fade" id="modalChinhSuaDanhMuc" tabindex="-1" aria-labelledby="modalChinhSuaDanhMuc" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="category_id" class="form-label">Mã danh mục</label>
                    <input readonly
                           type="text"
                           class="form-control"
                           id="category_id"
                           name="category_id"
                           value="" required />
                </div>

                <!-- Input Name -->
                <div class="mb-3">
                    <label for="name" class="form-label">Tên danh mục</label>
                    <input type="text"
                           class="form-control"
                           id="name_edit"
                           name="name_edit"
                           placeholder="Nhập tên danh mục"
                           value="" required />
                </div>

                <div class="mb-3">
                    <label for="parent_id" class="form-label">Danh mục cha</label>
                    <select class="form-control" id="parent_id_edit" name="parent_id_edit">
                        
                    </select>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Mô tả</label>
                    <textarea class="form-control"
                              id="description_edit"
                              name="description_edit"
                              rows="3"
                              placeholder="Nhập mô tả danh mục"></textarea> <!-- Thay bằng giá trị động -->
                </div>

                <!-- Dropdown Status -->
				<div class="mb-3">
					<label for="status" class="form-label">Trạng thái</label>
                    <select class="form-control" id="status_edit" name="status_edit">
                        <option value="1">Hoạt động</option>
                        <option value="0">Không hoạt động</option>
					</select>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
				<button type="button" class="btn btn-primary" onclick="editCategory()">Lưu thay đổi</button>
			</div>
		</div>
	</div>
</div>

<!-- Success Alert -->
<div id="success-alert" class="alert alert-success alert-dismissible fade show" role="alert" style="display: none;">
    <strong>Thành công!</strong> <span id="success-message"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<!-- Error Alert -->
<div id="error-alert" class="alert alert-danger alert-dismissible fade show" role="alert" style="display: none;">
    <strong>Lỗi!</strong> <span id="error-message"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
 
@section Scripts {
    <script>
        // Hàm load danh mục
        let currentPage = 1; // Trang hiện tại
        let totalPages = 1; // Tổng số trang (cập nhật khi nhận phản hồi API)
        $(document).ready(function () {
            // Load danh mục khi trang được tải
            loadCategories();
            $('#modalThemDanhMuc').on('show.bs.modal', function () {
                loadParentCategories(0, 0, 'parent_id');
            });
            $('#modalThemDanhMuc').on('hidden.bs.modal', function () {
                // Reset các trường input và textarea
                $('#name').val(''); // Reset tên danh mục
                $('#description').val(''); // Reset mô tả

                // Reset dropdown danh mục cha
                $('#parent_id').empty();
                // Xóa lớp nền (backdrop) nếu còn tồn tại
                $('.modal-backdrop').remove();
                
                    
            });

            $('#modalChinhSuaDanhMuc').on('hidden.bs.modal', function () {
                // Reset các trường input và textarea
                $('#category_id').val(''); // Reset mã danh mục
                $('#name_edit').val(''); // Reset tên danh mục
                $('#description_edit').val(''); // Reset mô tả

                // Reset dropdown danh mục cha
                $('#parent_id_edit').empty();

                // Reset trạng thái về giá trị mặc định
                $('#status').val('1'); // Mặc định là "Hoạt động"

                // Xóa lớp nền (backdrop) nếu còn tồn tại
                $('.modal-backdrop').remove();
               });

        });

        // Hiển thị thông báo thành công
        function showSuccessAlert(message) {
            $('#success-message').text(message);
            $('#success-alert').fadeIn();
        }

        // Hiển thị thông báo lỗi
        function showErrorAlert(message) {
            $('#error-message').text(message);
            $('#error-alert').fadeIn();
        }
        
        // Hàm định dạng ngày
        function formatDate(dateString) {
            const date = new Date(dateString);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Tháng bắt đầu từ 0
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }
        //Hàm giới hạn description
        function truncateText(text, maxLength) {
            if (text.length > maxLength) {
                return text.substring(0, maxLength) + '...';
            }
            return text;
        }
        function updatePagination() {
            const paginationContainer = $('#pagination');
            console.log(currentPage);
            console.log(totalPages);

            paginationContainer.empty(); // Xóa các nút cũ

            // Thêm nút "Trước"
            if (currentPage > 1) {
                paginationContainer.append(
                    `<button class="btn btn-outline-primary mx-1" onclick="loadCategories(${currentPage - 1})">Trước</button>`
                );
            }

            // Thêm các nút số trang
            for (let i = 1; i <= totalPages; i++) {
                paginationContainer.append(
                    `<button class="btn ${i === currentPage ? 'btn-primary' : 'btn-outline-primary'} mx-1" onclick="loadCategories(${i})">
                        ${i}
                    </button>`
                );
            }

            // Thêm nút "Sau"
            if (currentPage < totalPages) {
                paginationContainer.append(
                    `<button class="btn btn-outline-primary mx-1" onclick="loadCategories(${currentPage + 1})">Sau</button>`
                );
            }
        }
        
        // Hàm tải danh mục với phân trang
        function loadCategories(page = 1) {
            currentPage = page; // Cập nhật trang hiện tại
            const pageSize = 10; // Số lượng danh mục trên mỗi trang

            $.ajax({
                url: `https://localhost:7103/api/categoryAPI/getall?page=${page}&pageSize=${pageSize}`,
                type: 'GET',
                success: function (response) {
                    console.log(response);
                    
                    // Làm sạch bảng trước khi thêm mới
                    $('tbody').empty();
                    // Lặp qua các danh mục và hiển thị
                    response.categories.forEach(category => {
                        $('tbody').append(`
                            <tr>
                                <td>${category.categoryId}</td>
                                <td>${category.name}</td>
                                <td>${category.parentId !== null ? category.parentId : 'không có'}</td>
                                <td>${truncateText(category.description, 50)}</td>
                                <td>${category.status ? 'Hoạt động' : 'Không hoạt động'}</td>
                                <td>${formatDate(category.createdAt)}</td>
                                <td>${formatDate(category.updatedAt)}</td>
                                <td>
                                    <button class="btn btn-warning" onclick="showEditModal(${category.categoryId})">Chỉnh sửa</button>
                                    <button class="btn btn-danger" onclick="deleteCategory(${category.categoryId})">Xoá</button>
                                </td>
                            </tr>
                        `);
                    });

                    totalPages = Math.ceil(response.totalItems/10); // Cập nhật tổng số trang
                    updatePagination(); // Cập nhật nút phân trang
                },
                error: function (xhr) {
                    showErrorAlert("Không thể tải dữ liệu. Vui lòng thử lại.");
                }
            });
        }
        
        // Hàm tìm kiếm
        function searchCategories() {
            const searchQuery = $('input[aria-label="Search"]').val().trim();

            $.ajax({
                url: `https://localhost:7103/api/categoryAPI/GetAll?search=${encodeURIComponent(searchQuery)}`,
                type: 'GET',
                success: function (response) {
                    console.log(response); // Kiểm tra kết quả trả về
                    $('tbody').empty(); // Xóa bảng cũ trước khi hiển thị kết quả mới
                    response.categories.forEach(category => {
                        $('tbody').append(`
                            <tr>
                                <td>${category.categoryId}</td>
                                <td>${category.name}</td>
                                <td>${category.parentId !== null ? category.parentId : 'không có'}</td>
                                <td>${truncateText(category.description, 50)}</td>
                                <td>${category.status ? 'Hoạt động' : 'Không hoạt động'}</td>
                                <td>${formatDate(category.createdAt)}</td>
                                <td>${formatDate(category.updatedAt)}</td>
                                <td>
                                    <button class="btn btn-warning" onclick="showEditModal(${category.categoryId})">Chỉnh sửa</button>
                                    <button class="btn btn-danger" onclick="deleteCategory(${category.categoryId})">Xoá</button>
                                </td>
                            </tr>
                        `);
                    });
                },
                error: function (xhr) {
                    alert('Không thể tải dữ liệu.');
                }
            });
        }

        // Sự kiện khi người dùng gõ phím trong ô tìm kiếm
        $(document).on('keyup', 'input[aria-label="Search"]', function () {
            searchCategories();
        });
        //hien danh muc cha
        function loadParentCategories(selectedParentId = 0, currentCategoryId = 0, selectElementId = "") {
            $.ajax({
                url: 'https://localhost:7103/api/categoryAPI/getall', // URL API lấy danh mục cha
                type: 'GET',
                success: function (response) {
                    // Làm sạch danh sách trước khi thêm mới
                    $(`#${selectElementId}`).empty();

                    // Thêm một mục mặc định
                    $(`#${selectElementId}`).append('<option value="0">Chọn danh mục cha</option>');

                    // Lặp qua dữ liệu trả về và thêm vào <select>
                    response.categories.forEach(category => {
                        // Bỏ qua mục có `categoryId` trùng với `currentCategoryId`
                        if (category.categoryId !== currentCategoryId && category.status ===true) {
                            $(`#${selectElementId}`).append(`<option value="${category.categoryId}">${category.name}</option>`);
                        }
                    });

                    // Tự động chọn danh mục cha nếu `selectedParentId` được cung cấp
                    if (selectedParentId !== 0) {
                        $(`#${selectElementId} option[value="${selectedParentId}"]`).prop('selected', true);
                    }
                },
                error: function (xhr) {
                    const errorMessage = xhr.responseJSON?.message || "Có lỗi xảy ra. Vui lòng thử lại.";
                    showErrorAlert(errorMessage);
                }
            });
        }


        // Hiển thị modal chỉnh sửa
        function showEditModal(id) {
            $.ajax({
                url: `https://localhost:7103/api/categoryAPI/Get/${id}`,
                type: 'GET',
                success: function (response) {
                    const category = response.data;
                    console.log(category);
                    
                    $('#category_id').val(category.categoryId);
                    $('#name_edit').val(category.name);
                    
                    $('#description_edit').val(category.description);
                    loadParentCategories(category.parentId, category.categoryId, 'parent_id_edit');
                    // Gán trạng thái cho select box
                    $('#status_edit').val(category.status==true ? "1" : "0");
          
                    // Hiển thị modal chỉnh sửa
                    $('#modalChinhSuaDanhMuc').modal('show');
                    
                },
                error: function (xhr) {
                    alert('Không thể lấy dữ liệu danh mục.');
                }
            });
        }

        // Thêm danh mục
        function addCategory() {
            const name = $('#name').val().trim();
            const description = $('#description').val().trim();
            const parentId = $('#parent_id').val();

            // Validation trên client
            if (name === "" || name.length > 255) {
                alert("Tên danh mục là bắt buộc và không được vượt quá 255 ký tự.");
                return;
            }

            if (description.length > 255) {
                alert("Mô tả không được vượt quá 255 ký tự.");
                return;
            }

            const categoryData = {
                name: name,
                parentId: parentId,
                description: description
            };

            console.log("Dữ liệu gửi đi:", JSON.stringify(categoryData));
            debugger;
            $.ajax({
                url: 'https://localhost:7103/api/categoryAPI/Create',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(categoryData),
                success: function (response) {
                    showSuccessAlert(response.message); 
                    $('#modalThemDanhMuc').modal('hide');

                    loadCategories();
                },
                error: function (xhr) {
                    const errorMessage = xhr.responseJSON?.message || "Đã xảy ra lỗi. Vui lòng thử lại.";
                    showErrorAlert(errorMessage);
                }
            });
        }


        // Chỉnh sửa danh mục
        function editCategory() {
            const categoryData = {
                categoryId: $('#category_id').val(),
                name: $('#name_edit').val().trim(),
                parentId: $('#parent_id_edit').val() || null,
                description: $('#description_edit').val().trim(),
                status: $('#status_edit').val() === "1" // Chuyển trạng thái thành boolean
            };

            // Validation trên client
            if (categoryData.name === "" || categoryData.name.length > 255) {
                alert("Tên danh mục là bắt buộc và không được vượt quá 255 ký tự.");
                return;
            }

            if (categoryData.description.length > 255) {
                alert("Mô tả không được vượt quá 255 ký tự.");
                return;
            }

            $.ajax({
                url: 'https://localhost:7103/api/categoryAPI/Edit',
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(categoryData),
                success: function (response) {
                    alert(response.message);
                    $('#modalChinhSuaDanhMuc').modal('hide'); // Đóng modal sau khi chỉnh sửa thành công
                    showSuccessAlert(response.message);
                    loadCategories(); // Load lại danh sách danh mục
                },
                error: function (xhr) {
                    alert(xhr.responseJSON?.message || "Đã xảy ra lỗi khi chỉnh sửa danh mục.");
                    showErrorAlert(errorMessage);
                }
            });
        }

        // Xóa danh mục
        function deleteCategory(id) {
            if (confirm('Bạn có chắc chắn muốn xóa danh mục này?')) {
                $.ajax({
                    url: `https://localhost:7103/api/categoryAPI/Delete/${id}`,
                    type: 'DELETE',
                    success: function (response) {
                        alert(response.message);
                        loadCategories();
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON?.message || "Đã xảy ra lỗi khi chỉnh sửa danh mục.");
                    showErrorAlert(errorMessage);
                    }
                });
            }
        }
    </script>
}
